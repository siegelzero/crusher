% Generated by MiniZinc 2.9.3
% Solver library: /opt/homebrew/Cellar/minizinc/2.9.3/share/minizinc/gecode_presolver
% Command line invocation: minizinc --solver org.gecode --compile sum_to_100.mzn 

predicate fzn_increasing_int(array [int] of var int: x);
array [1..5] of int: X_INTRODUCED_22_ = [1,1,1,1,1];
var 1..100: X_INTRODUCED_16_;
var 1..100: X_INTRODUCED_17_;
var 1..100: X_INTRODUCED_18_;
var 1..100: X_INTRODUCED_19_;
var 1..100: X_INTRODUCED_20_;
var 0..1: X_INTRODUCED_23_ ::var_is_introduced ;
var bool: X_INTRODUCED_24_ ::var_is_introduced :: is_defined_var;
var 0..4: X_INTRODUCED_25_ ::var_is_introduced ;
var bool: X_INTRODUCED_26_ ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_27_ ::var_is_introduced ;
var bool: X_INTRODUCED_28_ ::var_is_introduced :: is_defined_var;
var 0..4: X_INTRODUCED_29_ ::var_is_introduced ;
var bool: X_INTRODUCED_30_ ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_31_ ::var_is_introduced ;
var bool: X_INTRODUCED_32_ ::var_is_introduced :: is_defined_var;
var 0..4: X_INTRODUCED_33_ ::var_is_introduced ;
var bool: X_INTRODUCED_34_ ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_35_ ::var_is_introduced ;
var bool: X_INTRODUCED_36_ ::var_is_introduced :: is_defined_var;
var 0..4: X_INTRODUCED_37_ ::var_is_introduced ;
var bool: X_INTRODUCED_38_ ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_39_ ::var_is_introduced ;
var bool: X_INTRODUCED_40_ ::var_is_introduced :: is_defined_var;
var 0..4: X_INTRODUCED_41_ ::var_is_introduced ;
var bool: X_INTRODUCED_42_ ::var_is_introduced :: is_defined_var;
array [1..5] of var int: x:: output_array([1..5]) = [X_INTRODUCED_16_,X_INTRODUCED_17_,X_INTRODUCED_18_,X_INTRODUCED_19_,X_INTRODUCED_20_];
constraint int_lin_eq(X_INTRODUCED_22_,[X_INTRODUCED_16_,X_INTRODUCED_17_,X_INTRODUCED_18_,X_INTRODUCED_19_,X_INTRODUCED_20_],100);
constraint int_mod(X_INTRODUCED_16_,2,X_INTRODUCED_23_);
constraint int_mod(X_INTRODUCED_16_,5,X_INTRODUCED_25_);
constraint bool_clause([X_INTRODUCED_24_,X_INTRODUCED_26_],[]);
constraint int_mod(X_INTRODUCED_17_,2,X_INTRODUCED_27_);
constraint int_mod(X_INTRODUCED_17_,5,X_INTRODUCED_29_);
constraint bool_clause([X_INTRODUCED_28_,X_INTRODUCED_30_],[]);
constraint int_mod(X_INTRODUCED_18_,2,X_INTRODUCED_31_);
constraint int_mod(X_INTRODUCED_18_,5,X_INTRODUCED_33_);
constraint bool_clause([X_INTRODUCED_32_,X_INTRODUCED_34_],[]);
constraint int_mod(X_INTRODUCED_19_,2,X_INTRODUCED_35_);
constraint int_mod(X_INTRODUCED_19_,5,X_INTRODUCED_37_);
constraint bool_clause([X_INTRODUCED_36_,X_INTRODUCED_38_],[]);
constraint int_mod(X_INTRODUCED_20_,2,X_INTRODUCED_39_);
constraint int_mod(X_INTRODUCED_20_,5,X_INTRODUCED_41_);
constraint bool_clause([X_INTRODUCED_40_,X_INTRODUCED_42_],[]);
constraint fzn_increasing_int(x);
constraint int_eq_reif(X_INTRODUCED_23_,0,X_INTRODUCED_24_):: defines_var(X_INTRODUCED_24_);
constraint int_eq_reif(X_INTRODUCED_25_,0,X_INTRODUCED_26_):: defines_var(X_INTRODUCED_26_);
constraint int_eq_reif(X_INTRODUCED_27_,0,X_INTRODUCED_28_):: defines_var(X_INTRODUCED_28_);
constraint int_eq_reif(X_INTRODUCED_29_,0,X_INTRODUCED_30_):: defines_var(X_INTRODUCED_30_);
constraint int_eq_reif(X_INTRODUCED_31_,0,X_INTRODUCED_32_):: defines_var(X_INTRODUCED_32_);
constraint int_eq_reif(X_INTRODUCED_33_,0,X_INTRODUCED_34_):: defines_var(X_INTRODUCED_34_);
constraint int_eq_reif(X_INTRODUCED_35_,0,X_INTRODUCED_36_):: defines_var(X_INTRODUCED_36_);
constraint int_eq_reif(X_INTRODUCED_37_,0,X_INTRODUCED_38_):: defines_var(X_INTRODUCED_38_);
constraint int_eq_reif(X_INTRODUCED_39_,0,X_INTRODUCED_40_):: defines_var(X_INTRODUCED_40_);
constraint int_eq_reif(X_INTRODUCED_41_,0,X_INTRODUCED_42_):: defines_var(X_INTRODUCED_42_);
solve :: int_search(x,first_fail,indomain_min,complete) satisfy;
